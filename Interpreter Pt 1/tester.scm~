; you must set lang to "Pretty Big"
(load "simpleParser.scm")
(load "interpret.scm")

(define testcases
 '(; part 1 tests
   ("tests/test1.javaish" 150)
   ("tests/test2.javaish" -4)
   ("tests/test3.javaish" 10)
   ("tests/test4.javaish" 16)
   ("tests/test5.javaish" 220)
   ("tests/test6.javaish" 5)
   ("tests/test7.javaish" 6)
   ("tests/test8.javaish" 10)
   ("tests/test9.javaish" 5)
   ("tests/test10.javaish" -39)
   ("tests/test11.javaish" error:undeclaredvariable)
   ("tests/test12.javaish" "error")
   ("tests/test13.javaish" "error")
   ("tests/test14.javaish" "error")
   ("tests/test15.javaish" true)
   ("tests/test16.javaish" 100)
   ("tests/test17.javaish" false)
   ("tests/test18.javaish" true)
   ("tests/test19.javaish" 128)
   ("tests/test20.javaish" 12)
   ; part 2 tests
   ("tests/test2-1.javaish" 20)
   ("tests/test2-2.javaish" 164)
   ("tests/test2-3.javaish" 32)
   ("tests/test2-4.javaish" 2)
   ("tests/test2-5.javaish" "error")
   ;("tests/test2-6.javaish" 25)
   ("tests/test2-7.javaish" 21)
   ("tests/test2-8.javaish" 6)
   ("tests/test2-9.javaish" -1)
   ("tests/test2-10.javaish" 789)
   ("tests/test2-11.javaish" "error")
   ("tests/test2-12.javaish" "error")
   ("tests/test2-13.javaish" "error")
   ("tests/test2-14.javaish" 12)
   ("tests/test2-15.javaish" 125)
   ("tests/test2-16.javaish" 110)
   ("tests/test2-17.javaish" 2000400)
   ("tests/test2-18.javaish" 101)
   ("tests/test2-19.javaish" "error")
   ; part 1 advanced tests
   ;("tests/test21.javaish" 30)
   ("tests/test22.javaish" 11)
   ;("tests/test23.javaish" 1106)
   ;("tests/test24.javaish" 12)
   ;("tests/test25.javaish" 16)
   ;("tests/test26.javaish" 72)
   ;("tests/test27.javaish" 21)
   ;("tests/test28.javaish" 164)
   ; part 2 advanced tests
   ("tests/test2-20.javaish" 21)
   )
  )
(define test-first
  (lambda (testcases)
    (begin
      (display (caar testcases)) (display ": ")
      (if (eq? (interpret (caar testcases)) (cadar testcases))
          (begin (display "pass") (newline))
          (begin
            (display " =") (display (interpret (caar testcases)))
            (display "  goal= ") (display (cadar testcases)) (newline))
          ))))
(define do-tests
  (lambda (testcases)
    (cond
      ((null? testcases) (display "We passed!"))
      ((null? (car testcases)) "tests go here")
      (else
        (test-first testcases)
        (do-tests (cdr testcases)))
      )))
(do-tests testcases)